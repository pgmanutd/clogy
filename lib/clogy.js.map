{"version":3,"file":"clogy.js","sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap e621ec9321fff8f7cd24","webpack:///src/constants/index.js","webpack:///src/utilities/common.js","webpack:///src/utilities/index.js","webpack:///src/constants/loggingDefaultOptions.js","webpack:///src/constants/loggingLevels.js","webpack:///src/constants/loggingMethods.js","webpack:///src/index.js","webpack:///src/main/Clogy.js","webpack:///src/main/Logger.js","webpack:///src/utilities/logging.js","webpack:///src/utilities/singleton.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"clogy\"] = factory();\n\telse\n\t\troot[\"clogy\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap e621ec9321fff8f7cd24","/* @flow */\n\nimport LOGGING_DEFAULT_OPTIONS from './loggingDefaultOptions';\nimport LOGGING_LEVELS from './loggingLevels';\nimport LOGGING_METHODS from './loggingMethods';\n\nexport {\n  LOGGING_DEFAULT_OPTIONS,\n  LOGGING_LEVELS,\n  LOGGING_METHODS\n};\n\n\n\n// WEBPACK FOOTER //\n// src/constants/index.js","/* @flow */\n\nimport { LOGGING_LEVELS } from '../constants';\n\n// I prefer default export rather than named export\nexport default {\n  isConsoleDefined,\n  isLogLevelValid,\n  isNoneLogLevel,\n  isLoggingAllowed,\n  getDateTime\n};\n\n////////////////////////\n\n/**\n * Check if console is available or not\n * @returns {Boolean} Returns true or false\n */\nfunction isConsoleDefined(): boolean {\n\n  // No need of ===, typeof returns a string\n  return typeof(console) != 'undefined';\n}\n\n/**\n * Check if current log level is valid, less than max\n * and more than min log level\n * @param  {Number}  logLevel: Current log level eg. 1, 2, 3, 4\n * @returns {Boolean} Returns true or false\n */\nfunction isLogLevelValid(logLevel: number): boolean {\n  return !!(\n    logLevel &&\n    logLevel >= LOGGING_LEVELS.range.min &&\n    logLevel <= LOGGING_LEVELS.range.max\n  );\n}\n\n/**\n * Check if current log level is none thus logging is disabled\n * @param  {Number}  logLevel: Current log level eg. 1, 2, 3, 4\n * @returns {Boolean} Returns true or false\n */\nfunction isNoneLogLevel(logLevel: number): boolean {\n  return logLevel === LOGGING_LEVELS.types.none;\n}\n\n/**\n * Check if level of passed log method is more than (or equal to) the\n * current log level, thus allowing logging accordingly\n * @param  {Number}  logLevel: Current log level eg. 1, 2, 3, 4\n * @param  {String}  loggingType    : logging method eg. log, info, error, warn\n * @returns {Boolean} Returns true or false\n */\nfunction isLoggingAllowed(\n  logLevel: ? number,\n  loggingType : string\n): boolean {\n  return (\n    LOGGING_LEVELS.types[loggingType] >= logLevel\n  );\n}\n\n/**\n * Get current date and time\n * @returns {String} Returns date and time in string format\n */\nfunction getDateTime(): string {\n  const d: Date = new Date();\n  const date: string = d.toDateString();\n\n  const customTimeFormat: ? string[] = d.toTimeString().match(/^([0-9]{2}:[0-9]{2}:[0-9]{2})/);\n\n  const time: string = (customTimeFormat && customTimeFormat.length) ? customTimeFormat[0] : '';\n\n  // NOTE: hey..!! see, 3 is not a magic number, if you think it is, then\n  // it's just milliseconds in 3 digits (000-999)\n  const appendMilliseconds: string = `00${d.getMilliseconds()}`.slice(-3);\n\n  return `${date} ${time}.${appendMilliseconds}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/utilities/common.js","/* @flow */\n\nimport common from './common';\nimport logging from './logging';\nimport singleton from './singleton';\n\nexport {\n  common,\n  logging,\n  singleton\n};\n\n\n\n// WEBPACK FOOTER //\n// src/utilities/index.js","/* @flow */\n\nexport default Object.freeze({\n  showDateTime: false,\n  prefix: ''\n});\n\n\n\n// WEBPACK FOOTER //\n// src/constants/loggingDefaultOptions.js","/* @flow */\n\nexport default Object.freeze({\n  get types() {\n    return {\n      log: 1,\n      trace: 2,\n      debug: 3,\n      info: 4,\n      warn: 5,\n      error: 6,\n      none: 7\n    };\n  },\n  get range() {\n    return {\n      min: this.types.log,\n      max: this.types.none\n    };\n  }\n});\n\n\n\n// WEBPACK FOOTER //\n// src/constants/loggingLevels.js","/* @flow */\n\nexport default ['log', 'trace', 'debug', 'info', 'warn', 'error'];\n\n\n\n// WEBPACK FOOTER //\n// src/constants/loggingMethods.js","/* @flow */\n\nimport Clogy from './main/Clogy';\n\nimport type { ClogyType } from './globalFlowTypes';\n\nconst clogy: ClogyType = new Clogy();\n\nexport default clogy;\n\n// Because of Babel@6\n// Can use plugin: https://www.npmjs.com/package/babel-plugin-add-module-exports\n// Used this soln. instead:\n// http://stackoverflow.com/questions/34736771/webpack-umd-library-return-object-default/34778391#34778391\n//\n// This is intended behaviour from babel@ to babel@6 to support ES6 import export module system\n//\n// $FlowFixMe: suppressing this error until babel changes this style\nmodule.exports = clogy;\n\n\n\n// WEBPACK FOOTER //\n// src/index.js","/* @flow */\n\nimport { singleton } from '../utilities';\nimport Logger from './Logger';\n\nclass Clogy extends Logger {\n\n  /**\n   * If you are using another JavaScript library that uses the clogy variable,\n   * you can run into conflicts with this library. In order to avoid these\n   * conflicts, you need to put clogy in no-conflict mode immediately after it\n   * is loaded onto the page and before you attempt to use clogy in your page.\n   * It works similar to jQuery's no-conflict mode\n   * @returns {clogy} Returns current instance i.e. clogy\n   */\n  noConflict(): this {\n\n    // No need of ===, typeof returns a string\n    if (typeof(window) != 'undefined' && window.clogy) {\n\n      // it will be deleted because clogy is not a variable, but\n      // a property of the global object i.e. window;\n      // check yourself ('clogy' in window) -> false after deletion\n      delete window.clogy;\n    }\n\n    return this;\n  }\n\n  /**\n   * Used to extend logging functionality. Can be used for:\n   * 1. Adding a prefix\n   * 2. Submitting logs to server\n   * 3. Logging to a file\n   * 4. Showing toast messages\n   * @param  {Function} decoFunc: A decorator callback for extending logging\n   *                               functionality\n   * @returns {void | undefined} Returns nothing\n   */\n  decorator(decoFunc: () => void): void {\n\n    // No need of ===, typeof returns a string\n    if (typeof(decoFunc) != 'function') {\n      throw new TypeError('Decorator should be a function');\n    }\n\n    decoFunc(singleton.getInstance(this));\n  }\n}\n\n// JS hoisting will not work with Classes\nexport default Clogy;\n\n\n\n// WEBPACK FOOTER //\n// src/main/Clogy.js","/* @flow */\n\nimport {\n  LOGGING_DEFAULT_OPTIONS,\n  LOGGING_LEVELS,\n  LOGGING_METHODS\n} from '../constants';\nimport { common, logging } from '../utilities';\n\nimport type { LevelsType, ClogyOptionsType } from '../globalFlowTypes';\n\nclass Logger {\n\n  /**** Flow's annotation syntax ****/\n  _options: ClogyOptionsType;\n\n  _level: ? number;\n  /***********************************/\n\n  constructor() {\n\n    // See it's better to keep these two in state rather than creating a\n    // local variable for them. This way we can keep OOP style along with\n    // functional style programming\n\n    // Avoiding Object reshaping\n    this._options = {\n      showDateTime: null,\n      prefix: null\n    };\n\n    this._level = null;\n\n    this._setDefaults();\n  }\n\n  /**\n   * Setting default options like prefix, showDateTime, log level\n   * @returns {void | undefined} Returns nothing\n   */\n  _setDefaults(): void {\n\n    // Set default options\n    this.setOptions(LOGGING_DEFAULT_OPTIONS);\n\n    // Set default log level\n    this.setLevel(this.LEVELS.info); // No need to use LOGGING_LEVELS.types.info again here\n  }\n\n  /**\n   * Used for returning config options\n   * @returns {ClogyOptionsType | null} Returns config options\n   */\n  getOptions(): ClogyOptionsType {\n    return this._options;\n  }\n\n  /**\n   * Used for setting options (showDateTime and prefix)\n   * @param  {ClogyOptionsType} options: Console options like showDateTime, prefix\n   * @returns {void | undefined} Returns nothing\n   */\n  setOptions(options: ClogyOptionsType) {\n    this._options = {\n      ...this.getOptions(),\n      ...options\n    };\n  }\n\n  /**\n   * Used for returning current log level; Default is info\n   * @returns {Number | null} Returns current log level\n   */\n  getLevel(): ? number {\n    return this._level;\n  }\n\n  /**\n   * Used for setting current log level\n   * @param  {number | string} level: log level (number or string)\n   * @returns {void | undefined} Returns nothing\n   * @example:\n   * clogy.setLevel(1); // log; number type argument\n   * clogy.setLevel(clogy.LEVELS.log); // log; enum type argument\n   * clogy.setLevel('log'); // log; string type argument\n   */\n  setLevel(level: number | string): void {\n\n    // No need to check if log level is less or more than min and max or invalid\n    // Will be handled when logging\n    this._level = (typeof(level) == 'string') ? // No need of ===, typeof returns a string\n      this.LEVELS[level.toLowerCase()] :\n      level;\n  }\n\n  /**\n   * I know this should be static, but I am exposing instance instead of class\n   * If LEVELS are static, may be we can do clogy.__proto__.constructor.LEVELS\n   * or Object.getPrototypeOf(clogy).constructor.LEVELS, but that's not a good\n   * way to access static property\n   *\n   * Different log levels (along with values); use them to set current log level\n   *  1. 'log': 1\n   *  2. 'trace': 2\n   *  3. 'debug': 3\n   *  4. 'info': 4\n   *  5. 'warn': 5\n   *  6. 'error': 6\n   *  7. 'none': 7 (if current level is none, it won't log anything)\n   *\n   * If current log level is 'info', then all the levels below 'info' are valid\n   * and rest are invalid. It means ' clogy.info()', 'clogy.warn()' and\n   * 'clogy.error()' will work but 'clogy.log()', 'clogy.trace()' and\n   * 'clogy.debug()' won't\n   * @returns {LevelsType} Returns all log levels\n   */\n  get LEVELS(): LevelsType {\n    return LOGGING_LEVELS.types;\n  }\n\n  /**\n   * Get stringifed allowed loggers (Order goes from top to bottom). Use utf-8 encoding for showing tick and cross marks, if not visible.\n   * @returns {String} Returns stringifed allowed loggers\n   * @example:\n   * clogy.stringifyAllowedLoggers(); // When current log level is info\n   * =>  1: log ✖\n   *     2: trace ✖\n   *     3: debug ✖\n   *     4: info ✔\n   *     5: warn ✔\n   *     6: error ✔\n   */\n  stringifyAllowedLoggers(): string {\n    const tickMark: string = '\\u2714';\n    const crossMark: string = '\\u2716';\n\n    return LOGGING_METHODS.map((loggingType: string, index: number) =>\n      `${(index + 1)}: ${loggingType} ${common.isLoggingAllowed(this.getLevel(), loggingType) ? tickMark: crossMark}`\n    ).join('\\n');\n  }\n\n  /**\n   * Enable all levels; equivalent to 'clogy.setLevel(clogy.LEVELS.log)''\n   * @returns {void | undefined} Returns nothing\n   */\n  enableAllLevels(): void {\n    this.setLevel(this.LEVELS.log);\n  }\n\n  /**\n   * Disable all levels; equivalent to 'clogy.setLevel(clogy.LEVELS.none)''\n   * @returns {void | undefined} Returns nothing\n   */\n  disableAllLevels(): void {\n    this.setLevel(this.LEVELS.none);\n  }\n}\n\n////////////////////////\n\n// Cached prototype once\nconst loggerPrototype: Object = Logger.prototype;\n\n/**\n * Array.ForEach is slower than for() in for each for Arrays in JavaScript;\n * but negligible performance hit here (small loop).\n * We are also maintaining functional style programming here\n *\n * Logging methods such as log, info, error, warn etc. Used\n * for logging to console\n * @returns {void | undefined} Returns nothing\n */\nLOGGING_METHODS.forEach((method: string) => {\n\n  // Not using arrow functions because 'this' will be undefined\n  // (Arrow functions capture the this value of the enclosing context)\n  loggerPrototype[method] = function(...args: any[]) {\n    const logToConsoleParams: {\n      currentLogLevel: number,\n      loggingType: string,\n      options: ClogyOptionsType\n    } = {\n      currentLogLevel: this.getLevel(),\n      loggingType: method,\n      options: this.getOptions()\n    };\n\n    logging.logToConsole(logToConsoleParams, args);\n  };\n});\n\n////////////////////////\n\n// JS hoisting will not work with Classes\nexport default Logger;\n\n\n\n// WEBPACK FOOTER //\n// src/main/Logger.js","/* @flow */\n\nimport {\n  LOGGING_DEFAULT_OPTIONS\n} from '../constants';\nimport common from './common';\n\nimport type { ClogyOptionsType } from '../globalFlowTypes';\n\nconst DEFAULT_LOGGING_TYPE: string = 'log';\n\n// I prefer default export rather than named export\nexport default {\n  logToConsole\n};\n\n////////////////////////\n\n/**\n * Get console options and push them into an array (for logging)\n * @param  {ClogyOptionsType} options: Console options like showDateTime, prefix\n * @returns {any[]} Returns an array of console options\n */\nfunction getConsoleOptions(options: ClogyOptionsType): any[] {\n  const consoleOptions: any[] = [];\n\n  if (options.showDateTime) {\n\n    // Better readability than consoleOptions[consoleOptions.length] = value\n    consoleOptions.push(`${common.getDateTime()}: `);\n  }\n\n  if (options.prefix) {\n    consoleOptions.push(options.prefix);\n  }\n\n  return consoleOptions;\n}\n\n/**\n * Used for logging to console\n * @param  {String} loggingType: logging method eg. log, info, error, warn\n * @param  {any}    args       : any value\n * @returns {void | undefined} Returns nothing\n */\nfunction justLogItDude(loggingType: string, args: any[]): void {\n  const consoleLoggingType: () => void = console[loggingType] || console[DEFAULT_LOGGING_TYPE];\n\n  // I know this should be returned earlier but there is\n  // negligible performance hit.\n  // May be I can move this to a function which can return me\n  // consoleLoggingType or false (maintain S of SOLID),\n  // but I prefer this to be here\n  if (!consoleLoggingType) {\n    return;\n  }\n\n  // The console object is not part of any standard and is an extension to the\n  // Document Object Model. Like other DOM objects, it is considered a host\n  // object and is not required to inherit from Object, nor its methods from\n  // Function, like native ECMAScript functions and objects do. This is the\n  // reason apply and call are undefined on those methods. In IE9, most DOM\n  // objects were improved to inherit from native ECMAScript types. As the\n  // developer tools are considered an extension to IE\n  // (albeit, a built-in extension), they clearly didn't receive the same\n  // improvements as the rest of the DOM.\n  // For what it's worth, you can still use some Function.prototype methods\n  // on console methods with a little bind() magic\n  Function.prototype.bind.call(consoleLoggingType, console).apply(console, args);\n}\n\n/**\n * Used for logging to console\n * Functional style programming; No mutating params, no state known beforehand\n * @param  {\n              currentLogLevel: number,\n              loggingType: string,\n              options: ClogyOptionsType\n           }        params: Object containing current log level ,\n *                          log methods, default options like prefix\n * @param  {any}    args  : any value\n * @returns {void | undefined} Returns nothing\n */\nfunction logToConsole({\n    currentLogLevel,\n    loggingType,\n    options = LOGGING_DEFAULT_OPTIONS // Avoiding crash, if someone set options to null or undefined\n  }: {\n    currentLogLevel: number,\n    loggingType: string,\n    options: ClogyOptionsType\n  } = {},\n  args: any[]\n): void {\n  if (!common.isConsoleDefined()) {\n    return;\n  }\n\n  if (!common.isLogLevelValid(currentLogLevel)) {\n    throw new RangeError('Invalid LogLevel set, Please set a valid LogLevel');\n  }\n\n  if (\n    common.isNoneLogLevel(currentLogLevel) ||\n    !common.isLoggingAllowed(currentLogLevel, loggingType)\n  ) {\n    return;\n  }\n\n  // Open array's arguments (array spread operator)\n  justLogItDude(loggingType, [...getConsoleOptions(options), ...args]);\n}\n\n\n\n// WEBPACK FOOTER //\n// src/utilities/logging.js","/* @flow */\n\nimport type { ClogyType } from '../globalFlowTypes';\n\nlet instance: ClogyType;\n\n// I prefer default export rather than named export\nexport default {\n  getInstance\n};\n\n////////////////////////\n\n/**\n * Creates new instance from Clogy's parent i.e. Logger (a copy of parent)\n * @param  {ClogyType} originalInstance: clogy's instance\n * @returns {ClogyType} Returns a copy of parent\n */\nfunction createInstance(originalInstance: ClogyType): Object {\n  // Cached lookup once\n  const proto = Object.getPrototypeOf;\n\n  return proto(proto(originalInstance));\n}\n\n/**\n * Get cached instance\n * @param  {ClogyType} originalInstance: clogy's instance\n * @returns {ClogyType} Returns a copy of parent (cached)\n */\nfunction getInstance(originalInstance: ClogyType): Object {\n  // No need to go deep into prototype chain again\n  if (!instance) {\n    instance = createInstance(originalInstance);\n  }\n\n  return instance;\n}\n\n\n\n// WEBPACK FOOTER //\n// src/utilities/singleton.js"],"mappings":";AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACpCA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;AAEA;AACA;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAOA;AACA;AACA;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AAKA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;;;;;;;AAOA;AAIA;AAGA;AACA;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC9EA;AACA;;;AAAA;AACA;;;AAAA;AACA;;;;;AAEA;AACA;;;;;;;;;;ACNA;AACA;AACA;AAFA;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAjBA;;;;;;;;;ACAA;;;;;;;;;;ACAA;AACA;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;AChBA;AACA;AAAA;AACA;;;;;;;;;;;AACA;;;;;;;;;AAEA;;;;;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AAEA;AACA;AACA;AADA;;;;;;;;;;;;;;ACjDA;AACA;AAIA;AACA;;;AAGA;AAMA;AACA;AALA;AAMA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;AACA;AACA;AACA;;;;;;;AAKA;AACA;AAIA;AACA;AACA;;;;;;AAIA;AACA;AACA;AACA;AACA;;;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;AAYA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;AAIA;AACA;AACA;AACA;AACA;;;;;;AAIA;AACA;AACA;AACA;;;AAxCA;AACA;AACA;;;;;;AAwCA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAHA;AACA;AANA;AAAA;AAAA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;AC/LA;AACA;AAEA;AACA;;;;;AAGA;AACA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AAYA;AAUA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1GA;AACA;AACA;AACA;AACA;AADA;AACA;AADA;AACA;AAGA;AACA;AACA;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;","sourceRoot":""}