{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///clogy.min.js","webpack:///webpack/bootstrap 42b9b52d18536aac9e87","webpack:///./src/constants/loggingLevels.js","webpack:///./src/constants/loggingDefaultOptions.js","webpack:///./src/constants/loggingMethods.js","webpack:///./src/index.js","webpack:///./src/main/Clogy.js","webpack:///./src/main/Logger.js","webpack:///./src/utilities/logging.js","webpack:///./src/utilities/singleton.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","__esModule","types","log","trace","debug","info","warn","error","none","range","min","max","showDateTime","prefix","_interopRequireDefault","obj","default","_Clogy","_Clogy2","clogy","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_singleton","_singleton2","_Logger2","_Logger3","Clogy","_Logger","apply","arguments","noConflict","window","decorator","decoFunc","getInstance","_extends","assign","target","i","length","source","key","hasOwnProperty","_createClass","defineProperties","props","descriptor","defineProperty","protoProps","staticProps","_loggingDefaultOptions","_loggingDefaultOptions2","_loggingLevels","_loggingLevels2","_loggingMethods","_loggingMethods2","_logging","_logging2","Logger","_options","_level","_setDefaults","setOptions","setLevel","options","getLevel","level","toLowerCase","enableAllLevels","disableAllLevels","get","loggerPrototype","forEach","method","logToConsoleParams","currentLogLevel","loggingType","_len","args","Array","_key","logToConsole","isConsoleDefined","console","isLogLevelValid","isNoneLogLevel","isLoggingAllowed","getDateTime","d","Date","date","toDateString","time","toTimeString","match","appendMilliseconds","getMilliseconds","slice","getConsoleOptions","consoleOptions","push","justLogItDude","consoleLoggingType","DEFAULT_LOGGING_TYPE","Function","bind","params","_params$options","undefined","RangeError","concat","createInstance","originalInstance","proto","getPrototypeOf"],"mappings":"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","file":"clogy.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"clogy\"] = factory();\n\telse\n\t\troot[\"clogy\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"clogy\"] = factory();\n\telse\n\t\troot[\"clogy\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(4);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\texports.default = {\n\t  get types() {\n\t    return {\n\t      log: 1,\n\t      trace: 2,\n\t      debug: 3,\n\t      info: 4,\n\t      warn: 5,\n\t      error: 6,\n\t      none: 7\n\t    };\n\t  },\n\t  get range() {\n\t    return {\n\t      min: this.types.log,\n\t      max: this.types.none\n\t    };\n\t  }\n\t};\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.default = {\n\t  showDateTime: false,\n\t  prefix: ''\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.default = ['log', 'trace', 'debug', 'info', 'warn', 'error'];\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Clogy = __webpack_require__(5);\n\t\n\tvar _Clogy2 = _interopRequireDefault(_Clogy);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar clogy = new _Clogy2.default();\n\t\n\texports.default = clogy;\n\t\n\t// Because of Babel@6\n\t// Can use plugin: https://www.npmjs.com/package/babel-plugin-add-module-exports\n\t// Used this soln. instead:\n\t// http://stackoverflow.com/questions/34736771/webpack-umd-library-return-object-default/34778391#34778391\n\t//\n\t// $FlowFixMe: suppressing this error until babel changes this style\n\t\n\tmodule.exports = clogy;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _singleton = __webpack_require__(8);\n\t\n\tvar _singleton2 = _interopRequireDefault(_singleton);\n\t\n\tvar _Logger2 = __webpack_require__(6);\n\t\n\tvar _Logger3 = _interopRequireDefault(_Logger2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Clogy = function (_Logger) {\n\t  _inherits(Clogy, _Logger);\n\t\n\t  function Clogy() {\n\t    _classCallCheck(this, Clogy);\n\t\n\t    return _possibleConstructorReturn(this, _Logger.apply(this, arguments));\n\t  }\n\t\n\t  /**\n\t   * If you are using another JavaScript library that uses the clogy variable,\n\t   * you can run into conflicts with this library. In order to avoid these\n\t   * conflicts, you need to put clogy in no-conflict mode immediately after it\n\t   * is loaded onto the page and before you attempt to use clogy in your page.\n\t   * It works similar to jQuery's no-conflict mode\n\t   * @return {clogy} Returns current instance i.e. clogy\n\t   */\n\t  Clogy.prototype.noConflict = function noConflict() {\n\t\n\t    // No need of ===, typeof returns a string\n\t    if (typeof window != 'undefined' && window.clogy) {\n\t\n\t      // it will be deleted because clogy is not a variable, but\n\t      // a property of the global object i.e. window;\n\t      // check yourself ('clogy' in window) -> false after deletion\n\t      delete window.clogy;\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Used to extend logging functionality. Can be used for:\n\t   * 1. Adding a prefix\n\t   * 2. Submitting logs to server\n\t   * 3. Logging to a file\n\t   * 4. Showing toast messages\n\t   * @param  {Function} decoFunc: A decorator callback for extending logging\n\t   *                               functionality\n\t   * @return {void | undefined} Returns nothing\n\t   */\n\t\n\t\n\t  Clogy.prototype.decorator = function decorator(decoFunc) {\n\t\n\t    // No need of ===, typeof returns a string\n\t    if (typeof decoFunc != 'function') {\n\t      throw new TypeError('Decorator should be a function');\n\t    }\n\t\n\t    decoFunc(_singleton2.default.getInstance(this));\n\t  };\n\t\n\t  return Clogy;\n\t}(_Logger3.default);\n\t\n\t// JS hoisting will not work with Classes\n\t\n\t\n\texports.default = Clogy;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _loggingDefaultOptions = __webpack_require__(2);\n\t\n\tvar _loggingDefaultOptions2 = _interopRequireDefault(_loggingDefaultOptions);\n\t\n\tvar _loggingLevels = __webpack_require__(1);\n\t\n\tvar _loggingLevels2 = _interopRequireDefault(_loggingLevels);\n\t\n\tvar _loggingMethods = __webpack_require__(3);\n\t\n\tvar _loggingMethods2 = _interopRequireDefault(_loggingMethods);\n\t\n\tvar _logging = __webpack_require__(7);\n\t\n\tvar _logging2 = _interopRequireDefault(_logging);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Logger = function () {\n\t  /***********************************/\n\t\n\t  /**** Flow's annotation syntax ****/\n\t  function Logger() {\n\t    _classCallCheck(this, Logger);\n\t\n\t    // See it's better to keep these two in state rather than creating a\n\t    // local variable for them. This way we can keep OOP style along with\n\t    // functional style programming\n\t\n\t    // Avoiding Object reshaping\n\t    this._options = {\n\t      showDateTime: null,\n\t      prefix: null\n\t    };\n\t\n\t    this._level = null;\n\t\n\t    this._setDefaults();\n\t  }\n\t\n\t  /**\n\t   * Setting default options like prefix, showDateTime, log level\n\t   * @return {void | undefined} Returns nothing\n\t   */\n\t\n\t\n\t  Logger.prototype._setDefaults = function _setDefaults() {\n\t\n\t    // Set default options\n\t    this.setOptions(_loggingDefaultOptions2.default);\n\t\n\t    // Set default log level\n\t    this.setLevel(_loggingLevels2.default.types.info);\n\t  };\n\t\n\t  /**\n\t   * getOptions() not required\n\t   *\n\t   * Used for setting options (showDateTime and prefix)\n\t   * @return {void | undefined} Returns nothing\n\t   */\n\t\n\t\n\t  Logger.prototype.setOptions = function setOptions(options) {\n\t    this._options = _extends({}, this._options, options);\n\t  };\n\t\n\t  /**\n\t   * Used for returning current log level; Default is info\n\t   * @return {Number | null} Returns current log level\n\t   */\n\t\n\t\n\t  Logger.prototype.getLevel = function getLevel() {\n\t    return this._level;\n\t  };\n\t\n\t  /**\n\t   * Used for setting current log level\n\t   * @param  {number | string} level: log level (number or string)\n\t   * @return {void | undefined} Returns nothing\n\t   * @example:\n\t   * clogy.setLevel(1); // log; number type argument\n\t   * clogy.setLevel(clogy.LEVELS.log); // log; enum type argument\n\t   * clogy.setLevel('log'); // log; string type argument\n\t   */\n\t\n\t\n\t  Logger.prototype.setLevel = function setLevel(level) {\n\t\n\t    // No need to check if log level is less or more than min and max or invalid\n\t    // Will be handled when logging\n\t    this._level = typeof level == 'string' ? // No need of ===, typeof returns a string\n\t    _loggingLevels2.default.types[level.toLowerCase()] : level;\n\t  };\n\t\n\t  /**\n\t   * I know this should be static, but I am exposing instance instead of class\n\t   * If LEVELS are static, may be we can do clogy.__proto__.constructor.LEVELS\n\t   * or Object.getPrototypeOf(clogy).constructor.LEVELS, but that's not a good\n\t   * way to access static property\n\t   *\n\t   * Different log levels (along with values); use them to set current log level\n\t   *  1. 'log': 1\n\t   *  2. 'trace': 2\n\t   *  3. 'debug': 3\n\t   *  4. 'info': 4\n\t   *  5. 'warn': 5\n\t   *  6. 'error': 6\n\t   *  7. 'none': 7 (if current level is none, it won't log anything)\n\t   *\n\t   * If current log level is 'info', then all the levels below 'info' are valid\n\t   * and rest are invalid. It means ' clogy.info()', 'clogy.warn()' and\n\t   * 'clogy.error()' will work but 'clogy.log()', 'clogy.trace()' and\n\t   * 'clogy.debug()' won't\n\t   * @return {LevelsType} Returns all log levels\n\t   */\n\t\n\t\n\t  /**\n\t   * Enable all levels; equivalent to 'clogy.setLevel(clogy.LEVELS.log)''\n\t   * @return {void | undefined} Returns nothing\n\t   */\n\t  Logger.prototype.enableAllLevels = function enableAllLevels() {\n\t    this.setLevel(_loggingLevels2.default.types.log);\n\t  };\n\t\n\t  /**\n\t   * Disable all levels; equivalent to 'clogy.setLevel(clogy.LEVELS.none)''\n\t   * @return {void | undefined} Returns nothing\n\t   */\n\t\n\t\n\t  Logger.prototype.disableAllLevels = function disableAllLevels() {\n\t    this.setLevel(_loggingLevels2.default.types.none);\n\t  };\n\t\n\t  _createClass(Logger, [{\n\t    key: 'LEVELS',\n\t    get: function get() {\n\t      return _loggingLevels2.default.types;\n\t    }\n\t  }]);\n\t\n\t  return Logger;\n\t}();\n\t\n\t////////////////////////\n\t\n\t// Cached prototype once\n\t\n\t\n\tvar loggerPrototype = Logger.prototype;\n\t\n\t/**\n\t * Array.ForEach is slower than for() in for each for Arrays in JavaScript;\n\t * but negligible performance hit here (small loop).\n\t * We are also maintaining functional style programming here\n\t *\n\t * Logging methods such as log, info, error, warn etc. Used\n\t * for logging to console\n\t * @return {void | undefined} Returns nothing\n\t */\n\t_loggingMethods2.default.forEach(function (method) {\n\t\n\t  // Not using arrow functions because 'this' will be undefined\n\t  // (Arrow functions capture the this value of the enclosing context)\n\t  loggerPrototype[method] = function () {\n\t    var logToConsoleParams = {\n\t      currentLogLevel: this.getLevel(),\n\t      loggingType: method,\n\t      options: this._options\n\t    };\n\t\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\t\n\t    _logging2.default.logToConsole(logToConsoleParams, args);\n\t  };\n\t});\n\t\n\t////////////////////////\n\t\n\t// JS hoisting will not work with Classes\n\texports.default = Logger;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _loggingLevels = __webpack_require__(1);\n\t\n\tvar _loggingLevels2 = _interopRequireDefault(_loggingLevels);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar DEFAULT_LOGGING_TYPE = 'log';\n\t\n\t// I prefer default export rather than named export\n\t\n\t\n\texports.default = {\n\t  logToConsole: logToConsole\n\t};\n\t\n\t////////////////////////\n\t\n\t/**\n\t * Check if console is available or not\n\t * @return {Boolean} Returns true or false\n\t */\n\t\n\tfunction isConsoleDefined() {\n\t\n\t  // No need of ===, typeof returns a string\n\t  return typeof console != 'undefined';\n\t}\n\t\n\t/**\n\t * Check if current log level is valid, less than max\n\t * and more than min log level\n\t * @param  {Number}  currentLogLevel: Current log level eg. 1, 2, 3, 4\n\t * @return {Boolean} Returns true or false\n\t */\n\tfunction isLogLevelValid(currentLogLevel) {\n\t  return !!(currentLogLevel && currentLogLevel >= _loggingLevels2.default.range.min && currentLogLevel <= _loggingLevels2.default.range.max);\n\t}\n\t\n\t/**\n\t * Check if current log level is none thus logging is disabled\n\t * @param  {Number}  currentLogLevel: Current log level eg. 1, 2, 3, 4\n\t * @return {Boolean} Returns true or false\n\t */\n\tfunction isNoneLogLevel(currentLogLevel) {\n\t  return currentLogLevel === _loggingLevels2.default.types.none;\n\t}\n\t\n\t/**\n\t * Check if current log level is less than or equal to the level of current\n\t * log method, thus allowing logging accordingly\n\t * @param  {Number}  currentLogLevel: Current log level eg. 1, 2, 3, 4\n\t * @param  {String}  loggingType    : logging method eg. log, info, error, warn\n\t * @return {Boolean} Returns true or false\n\t */\n\tfunction isLoggingAllowed(currentLogLevel, loggingType) {\n\t  return _loggingLevels2.default.types[loggingType] >= currentLogLevel;\n\t}\n\t\n\t/**\n\t * Get current date and time\n\t * @return {String} Returns date and time in string format\n\t */\n\tfunction getDateTime() {\n\t  var d = new Date();\n\t  var date = d.toDateString();\n\t\n\t  // 0 means first matched string, which will be true always unless someone\n\t  // overrides the result\n\t  var time = d.toTimeString().match(/^([0-9]{2}:[0-9]{2}:[0-9]{2})/)[0];\n\t\n\t  // NOTE: hey..!! see, 3 is not a magic number, if you think it is, then\n\t  // it's just milliseconds in 3 digits (000-999)\n\t  var appendMilliseconds = ('00' + d.getMilliseconds()).slice(-3);\n\t\n\t  return date + ' ' + time + '.' + appendMilliseconds;\n\t}\n\t\n\t/**\n\t * Get console options and push them into an array (for logging)\n\t * @param  {Object} options: Console options like showDateTime, prefix\n\t * @return {any[]} Returns an array of console options\n\t */\n\tfunction getConsoleOptions(options) {\n\t  var consoleOptions = [];\n\t\n\t  if (options.showDateTime) {\n\t\n\t    // Better readability than consoleOptions[consoleOptions.length] = value\n\t    consoleOptions.push(getDateTime() + ': ');\n\t  }\n\t\n\t  if (options.prefix) {\n\t    consoleOptions.push(options.prefix);\n\t  }\n\t\n\t  return consoleOptions;\n\t}\n\t\n\t/**\n\t * Used for logging to console\n\t * @param  {String} loggingType: logging method eg. log, info, error, warn\n\t * @param  {any}    args       : any value\n\t * @return {void | undefined} Returns nothing\n\t */\n\tfunction justLogItDude(loggingType, args) {\n\t  var consoleLoggingType = console[loggingType] || console[DEFAULT_LOGGING_TYPE];\n\t\n\t  // I know this should be returned earlier but there is\n\t  // negligible performance hit.\n\t  // May be I can move this to a function which can return me\n\t  // consoleLoggingType or false (maintain S of SOLID),\n\t  // but I prefer this to be here\n\t  if (!consoleLoggingType) {\n\t    return;\n\t  }\n\t\n\t  // The console object is not part of any standard and is an extension to the\n\t  // Document Object Model. Like other DOM objects, it is considered a host\n\t  // object and is not required to inherit from Object, nor its methods from\n\t  // Function, like native ECMAScript functions and objects do. This is the\n\t  // reason apply and call are undefined on those methods. In IE9, most DOM\n\t  // objects were improved to inherit from native ECMAScript types. As the\n\t  // developer tools are considered an extension to IE\n\t  // (albeit, a built-in extension), they clearly didn't receive the same\n\t  // improvements as the rest of the DOM.\n\t  // For what it's worth, you can still use some Function.prototype methods\n\t  // on console methods with a little bind() magic\n\t  Function.prototype.bind.call(consoleLoggingType, console).apply(console, args);\n\t}\n\t\n\t/**\n\t * Used for logging to console\n\t * Functional style programming; No mutating params, no state known beforehand\n\t * @param  {Object} params: Object containing current log level ,\n\t *                          log methods, default options like prefix\n\t * @param  {any}    args  : any value\n\t * @return {void | undefined} Returns nothing\n\t */\n\tfunction logToConsole(params, args) {\n\t  if (!isConsoleDefined()) {\n\t    return;\n\t  }\n\t\n\t  var currentLogLevel = params.currentLogLevel;\n\t  var loggingType = params.loggingType;\n\t  var _params$options = params.options;\n\t  var options = _params$options === undefined ? {} : _params$options;\n\t\n\t\n\t  if (!isLogLevelValid(currentLogLevel)) {\n\t    throw new RangeError('Invalid LogLevel set, Please set a valid LogLevel');\n\t  }\n\t\n\t  if (isNoneLogLevel(currentLogLevel) || !isLoggingAllowed(currentLogLevel, loggingType)) {\n\t    return;\n\t  }\n\t\n\t  // Open array's arguments (array spread operator)\n\t  justLogItDude(loggingType, [].concat(getConsoleOptions(options), args));\n\t}\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\t\n\tvar instance = void 0;\n\t\n\t// I prefer default export rather than named export\n\t\n\t\n\texports.default = {\n\t  getInstance: getInstance\n\t};\n\t\n\t////////////////////////\n\t\n\t/**\n\t * Creates new instance from Clogy's parent i.e. Logger (a copy of parent)\n\t * @param  {ClogyType} originalInstance: clogy's instance\n\t * @return {ClogyType} Returns a copy of parent\n\t */\n\t\n\tfunction createInstance(originalInstance) {\n\t  // Cached lookup once\n\t  var proto = Object.getPrototypeOf;\n\t\n\t  return proto(proto(originalInstance));\n\t}\n\t\n\t/**\n\t * Get cached instance\n\t * @param  {ClogyType} originalInstance: clogy's instance\n\t * @return {ClogyType} Returns a copy of parent (cached)\n\t */\n\tfunction getInstance(originalInstance) {\n\t  // No need to go deep into prototype chain again\n\t  if (!instance) {\n\t    instance = createInstance(originalInstance);\n\t  }\n\t\n\t  return instance;\n\t}\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** clogy.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 42b9b52d18536aac9e87\n **/","/* @flow */\n\nexport default {\n  get types() {\n    return {\n      log: 1,\n      trace: 2,\n      debug: 3,\n      info: 4,\n      warn: 5,\n      error: 6,\n      none: 7\n    };\n  },\n  get range() {\n    return {\n      min: this.types.log,\n      max: this.types.none\n    };\n  }\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/constants/loggingLevels.js\n **/","/* @flow */\n\nexport default {\n  showDateTime: false,\n  prefix: ''\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/constants/loggingDefaultOptions.js\n **/","/* @flow */\n\nexport default ['log', 'trace', 'debug', 'info', 'warn', 'error'];\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/constants/loggingMethods.js\n **/","/* @flow */\n\nimport Clogy from './main/Clogy';\n\nimport type { ClogyType } from './globalFlowTypes';\n\nconst clogy: ClogyType = new Clogy();\n\nexport default clogy;\n\n// Because of Babel@6\n// Can use plugin: https://www.npmjs.com/package/babel-plugin-add-module-exports\n// Used this soln. instead:\n// http://stackoverflow.com/questions/34736771/webpack-umd-library-return-object-default/34778391#34778391\n//\n// $FlowFixMe: suppressing this error until babel changes this style\nmodule.exports = clogy;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/index.js\n **/","/* @flow */\n\nimport singleton from '../utilities/singleton';\nimport Logger from './Logger';\n\nclass Clogy extends Logger {\n\n  /**\n   * If you are using another JavaScript library that uses the clogy variable,\n   * you can run into conflicts with this library. In order to avoid these\n   * conflicts, you need to put clogy in no-conflict mode immediately after it\n   * is loaded onto the page and before you attempt to use clogy in your page.\n   * It works similar to jQuery's no-conflict mode\n   * @return {clogy} Returns current instance i.e. clogy\n   */\n  noConflict(): this {\n\n    // No need of ===, typeof returns a string\n    if (typeof(window) != 'undefined' && window.clogy) {\n\n      // it will be deleted because clogy is not a variable, but\n      // a property of the global object i.e. window;\n      // check yourself ('clogy' in window) -> false after deletion\n      delete window.clogy;\n    }\n\n    return this;\n  }\n\n  /**\n   * Used to extend logging functionality. Can be used for:\n   * 1. Adding a prefix\n   * 2. Submitting logs to server\n   * 3. Logging to a file\n   * 4. Showing toast messages\n   * @param  {Function} decoFunc: A decorator callback for extending logging\n   *                               functionality\n   * @return {void | undefined} Returns nothing\n   */\n  decorator(decoFunc: () => void): void {\n\n    // No need of ===, typeof returns a string\n    if (typeof(decoFunc) != 'function') {\n      throw new TypeError('Decorator should be a function');\n    }\n\n    decoFunc(singleton.getInstance(this));\n  }\n}\n\n// JS hoisting will not work with Classes\nexport default Clogy;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/main/Clogy.js\n **/","/* @flow */\n\nimport LOGGING_DEFAULT_OPTIONS from '../constants/loggingDefaultOptions';\nimport LOGGING_LEVELS from '../constants/loggingLevels';\nimport LOGGING_METHODS from '../constants/loggingMethods';\nimport logging from '../utilities/logging';\n\nimport type { LevelsType } from '../globalFlowTypes';\n\nclass Logger {\n\n  /**** Flow's annotation syntax ****/\n  _options: {\n    showDateTime: ? boolean,\n    prefix: ? string\n  };\n  _level: ? number;\n  /***********************************/\n\n  constructor() {\n    // See it's better to keep these two in state rather than creating a\n    // local variable for them. This way we can keep OOP style along with\n    // functional style programming\n\n    // Avoiding Object reshaping\n    this._options = {\n      showDateTime: null,\n      prefix: null\n    };\n\n    this._level = null;\n\n    this._setDefaults();\n  }\n\n  /**\n   * Setting default options like prefix, showDateTime, log level\n   * @return {void | undefined} Returns nothing\n   */\n  _setDefaults(): void {\n\n    // Set default options\n    this.setOptions(LOGGING_DEFAULT_OPTIONS);\n\n    // Set default log level\n    this.setLevel(LOGGING_LEVELS.types.info);\n  }\n\n  /**\n   * getOptions() not required\n   *\n   * Used for setting options (showDateTime and prefix)\n   * @return {void | undefined} Returns nothing\n   */\n  setOptions(options: Object) {\n    this._options = {\n      ...this._options,\n      ...options\n    };\n  }\n\n  /**\n   * Used for returning current log level; Default is info\n   * @return {Number | null} Returns current log level\n   */\n  getLevel(): ? number {\n    return this._level;\n  }\n\n  /**\n   * Used for setting current log level\n   * @param  {number | string} level: log level (number or string)\n   * @return {void | undefined} Returns nothing\n   * @example:\n   * clogy.setLevel(1); // log; number type argument\n   * clogy.setLevel(clogy.LEVELS.log); // log; enum type argument\n   * clogy.setLevel('log'); // log; string type argument\n   */\n  setLevel(level: number | string): void {\n\n    // No need to check if log level is less or more than min and max or invalid\n    // Will be handled when logging\n    this._level = (typeof(level) == 'string') ? // No need of ===, typeof returns a string\n      LOGGING_LEVELS.types[level.toLowerCase()] :\n      level;\n  }\n\n  /**\n   * I know this should be static, but I am exposing instance instead of class\n   * If LEVELS are static, may be we can do clogy.__proto__.constructor.LEVELS\n   * or Object.getPrototypeOf(clogy).constructor.LEVELS, but that's not a good\n   * way to access static property\n   *\n   * Different log levels (along with values); use them to set current log level\n   *  1. 'log': 1\n   *  2. 'trace': 2\n   *  3. 'debug': 3\n   *  4. 'info': 4\n   *  5. 'warn': 5\n   *  6. 'error': 6\n   *  7. 'none': 7 (if current level is none, it won't log anything)\n   *\n   * If current log level is 'info', then all the levels below 'info' are valid\n   * and rest are invalid. It means ' clogy.info()', 'clogy.warn()' and\n   * 'clogy.error()' will work but 'clogy.log()', 'clogy.trace()' and\n   * 'clogy.debug()' won't\n   * @return {LevelsType} Returns all log levels\n   */\n  get LEVELS(): LevelsType {\n    return LOGGING_LEVELS.types;\n  }\n\n  /**\n   * Enable all levels; equivalent to 'clogy.setLevel(clogy.LEVELS.log)''\n   * @return {void | undefined} Returns nothing\n   */\n  enableAllLevels(): void {\n    this.setLevel(LOGGING_LEVELS.types.log);\n  }\n\n  /**\n   * Disable all levels; equivalent to 'clogy.setLevel(clogy.LEVELS.none)''\n   * @return {void | undefined} Returns nothing\n   */\n  disableAllLevels(): void {\n    this.setLevel(LOGGING_LEVELS.types.none);\n  }\n}\n\n////////////////////////\n\n// Cached prototype once\nconst loggerPrototype: Object = Logger.prototype;\n\n/**\n * Array.ForEach is slower than for() in for each for Arrays in JavaScript;\n * but negligible performance hit here (small loop).\n * We are also maintaining functional style programming here\n *\n * Logging methods such as log, info, error, warn etc. Used\n * for logging to console\n * @return {void | undefined} Returns nothing\n */\nLOGGING_METHODS.forEach((method: string) => {\n\n  // Not using arrow functions because 'this' will be undefined\n  // (Arrow functions capture the this value of the enclosing context)\n  loggerPrototype[method] = function(...args) {\n    const logToConsoleParams = {\n      currentLogLevel: this.getLevel(),\n      loggingType: method,\n      options: this._options\n    };\n\n    logging.logToConsole(logToConsoleParams, args);\n  };\n});\n\n////////////////////////\n\n// JS hoisting will not work with Classes\nexport default Logger;\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/main/Logger.js\n **/","/* @flow */\n\nimport LOGGING_LEVELS from '../constants/loggingLevels';\n\nconst DEFAULT_LOGGING_TYPE: string = 'log';\n\n// I prefer default export rather than named export\nexport default {\n  logToConsole\n};\n\n////////////////////////\n\n/**\n * Check if console is available or not\n * @return {Boolean} Returns true or false\n */\nfunction isConsoleDefined(): boolean {\n\n  // No need of ===, typeof returns a string\n  return typeof(console) != 'undefined';\n}\n\n/**\n * Check if current log level is valid, less than max\n * and more than min log level\n * @param  {Number}  currentLogLevel: Current log level eg. 1, 2, 3, 4\n * @return {Boolean} Returns true or false\n */\nfunction isLogLevelValid(currentLogLevel: number): boolean {\n  return !!(\n    currentLogLevel &&\n    currentLogLevel >= LOGGING_LEVELS.range.min &&\n    currentLogLevel <= LOGGING_LEVELS.range.max\n  );\n}\n\n/**\n * Check if current log level is none thus logging is disabled\n * @param  {Number}  currentLogLevel: Current log level eg. 1, 2, 3, 4\n * @return {Boolean} Returns true or false\n */\nfunction isNoneLogLevel(currentLogLevel: number): boolean {\n  return currentLogLevel === LOGGING_LEVELS.types.none;\n}\n\n/**\n * Check if current log level is less than or equal to the level of current\n * log method, thus allowing logging accordingly\n * @param  {Number}  currentLogLevel: Current log level eg. 1, 2, 3, 4\n * @param  {String}  loggingType    : logging method eg. log, info, error, warn\n * @return {Boolean} Returns true or false\n */\nfunction isLoggingAllowed(\n  currentLogLevel: number,\n  loggingType: string\n): boolean {\n  return (\n    LOGGING_LEVELS.types[loggingType] >= currentLogLevel\n  );\n}\n\n/**\n * Get current date and time\n * @return {String} Returns date and time in string format\n */\nfunction getDateTime(): string {\n  const d: Object = new Date();\n  const date: string = d.toDateString();\n\n  // 0 means first matched string, which will be true always unless someone\n  // overrides the result\n  const time: string = d.toTimeString().match(/^([0-9]{2}:[0-9]{2}:[0-9]{2})/)[0];\n\n  // NOTE: hey..!! see, 3 is not a magic number, if you think it is, then\n  // it's just milliseconds in 3 digits (000-999)\n  const appendMilliseconds: string = `00${d.getMilliseconds()}`.slice(-3);\n\n  return `${date} ${time}.${appendMilliseconds}`;\n}\n\n/**\n * Get console options and push them into an array (for logging)\n * @param  {Object} options: Console options like showDateTime, prefix\n * @return {any[]} Returns an array of console options\n */\nfunction getConsoleOptions(options: Object): any[] {\n  const consoleOptions: any[] = [];\n\n  if (options.showDateTime) {\n\n    // Better readability than consoleOptions[consoleOptions.length] = value\n    consoleOptions.push(`${getDateTime()}: `);\n  }\n\n  if (options.prefix) {\n    consoleOptions.push(options.prefix);\n  }\n\n  return consoleOptions;\n}\n\n/**\n * Used for logging to console\n * @param  {String} loggingType: logging method eg. log, info, error, warn\n * @param  {any}    args       : any value\n * @return {void | undefined} Returns nothing\n */\nfunction justLogItDude(loggingType: string, args: any[]): void {\n  const consoleLoggingType: () => void = console[loggingType] || console[DEFAULT_LOGGING_TYPE];\n\n  // I know this should be returned earlier but there is\n  // negligible performance hit.\n  // May be I can move this to a function which can return me\n  // consoleLoggingType or false (maintain S of SOLID),\n  // but I prefer this to be here\n  if (!consoleLoggingType) {\n    return;\n  }\n\n  // The console object is not part of any standard and is an extension to the\n  // Document Object Model. Like other DOM objects, it is considered a host\n  // object and is not required to inherit from Object, nor its methods from\n  // Function, like native ECMAScript functions and objects do. This is the\n  // reason apply and call are undefined on those methods. In IE9, most DOM\n  // objects were improved to inherit from native ECMAScript types. As the\n  // developer tools are considered an extension to IE\n  // (albeit, a built-in extension), they clearly didn't receive the same\n  // improvements as the rest of the DOM.\n  // For what it's worth, you can still use some Function.prototype methods\n  // on console methods with a little bind() magic\n  Function.prototype.bind.call(consoleLoggingType, console).apply(console, args);\n}\n\n/**\n * Used for logging to console\n * Functional style programming; No mutating params, no state known beforehand\n * @param  {Object} params: Object containing current log level ,\n *                          log methods, default options like prefix\n * @param  {any}    args  : any value\n * @return {void | undefined} Returns nothing\n */\nfunction logToConsole(params: Object, args: any[]): void {\n  if (!isConsoleDefined()) {\n    return;\n  }\n\n  const {\n    currentLogLevel,\n    loggingType,\n    options = {} // Avoiding crash, if someone set options to null or undefined\n  }: {\n    currentLogLevel: number,\n    loggingType: string,\n    options: Object\n  } = params;\n\n  if (!isLogLevelValid(currentLogLevel)) {\n    throw new RangeError('Invalid LogLevel set, Please set a valid LogLevel');\n  }\n\n  if (\n    isNoneLogLevel(currentLogLevel) ||\n    !isLoggingAllowed(currentLogLevel, loggingType)\n  ) {\n    return;\n  }\n\n  // Open array's arguments (array spread operator)\n  justLogItDude(loggingType, [...getConsoleOptions(options), ...args]);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/utilities/logging.js\n **/","/* @flow */\n\nimport type { ClogyType } from '../globalFlowTypes';\n\nlet instance: ClogyType;\n\n// I prefer default export rather than named export\nexport default {\n  getInstance\n};\n\n////////////////////////\n\n/**\n * Creates new instance from Clogy's parent i.e. Logger (a copy of parent)\n * @param  {ClogyType} originalInstance: clogy's instance\n * @return {ClogyType} Returns a copy of parent\n */\nfunction createInstance(originalInstance: ClogyType): Object {\n  // Cached lookup once\n  const proto = Object.getPrototypeOf;\n\n  return proto(proto(originalInstance));\n}\n\n/**\n * Get cached instance\n * @param  {ClogyType} originalInstance: clogy's instance\n * @return {ClogyType} Returns a copy of parent (cached)\n */\nfunction getInstance(originalInstance: ClogyType): Object {\n  // No need to go deep into prototype chain again\n  if (!instance) {\n    instance = createInstance(originalInstance);\n  }\n\n  return instance;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/utilities/singleton.js\n **/"],"sourceRoot":""}