{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///clogy.min.js","webpack:///webpack/bootstrap d706405c85f0694eef41","webpack:///./src/constants/index.js","webpack:///./src/utilities/common.js","webpack:///./src/utilities/index.js","webpack:///./src/constants/loggingDefaultOptions.js","webpack:///./src/constants/loggingLevels.js","webpack:///./src/constants/loggingMethods.js","webpack:///./src/index.js","webpack:///./src/main/Clogy.js","webpack:///./src/main/Logger.js","webpack:///./src/utilities/logging.js","webpack:///./src/utilities/singleton.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","LOGGING_METHODS","LOGGING_LEVELS","LOGGING_DEFAULT_OPTIONS","undefined","_loggingDefaultOptions","_loggingDefaultOptions2","_loggingLevels","_loggingLevels2","_loggingMethods","_loggingMethods2","isConsoleDefined","console","isLogLevelValid","logLevel","_constants","range","min","max","isNoneLogLevel","types","none","isLoggingAllowed","loggingType","getDateTime","d","Date","date","toDateString","customTimeFormat","toTimeString","match","time","length","appendMilliseconds","getMilliseconds","slice","singleton","logging","common","_common","_common2","_logging","_logging2","_singleton","_singleton2","Object","freeze","showDateTime","prefix","log","trace","debug","info","warn","error","_Clogy","_Clogy2","clogy","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","prototype","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","_utilities","_Logger2","_Logger3","Clogy","_Logger","apply","arguments","noConflict","window","decorator","decoFunc","getInstance","_extends","assign","target","i","source","key","hasOwnProperty","_createClass","defineProperties","props","descriptor","defineProperty","protoProps","staticProps","Logger","_options","_level","_setDefaults","setOptions","setLevel","LEVELS","getOptions","options","getLevel","level","toLowerCase","stringifyAllowedLoggers","_this","tickMark","crossMark","map","index","join","enableAllLevels","disableAllLevels","get","loggerPrototype","forEach","method","logToConsoleParams","currentLogLevel","_len","args","Array","_key","logToConsole","getConsoleOptions","consoleOptions","push","justLogItDude","consoleLoggingType","DEFAULT_LOGGING_TYPE","Function","bind","_ref","_ref$options","RangeError","concat","createInstance","originalInstance","proto","getPrototypeOf"],"mappings":"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","file":"clogy.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"clogy\"] = factory();\n\telse\n\t\troot[\"clogy\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"clogy\"] = factory();\n\telse\n\t\troot[\"clogy\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(7);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.LOGGING_METHODS = exports.LOGGING_LEVELS = exports.LOGGING_DEFAULT_OPTIONS = undefined;\n\t\n\tvar _loggingDefaultOptions = __webpack_require__(4);\n\t\n\tvar _loggingDefaultOptions2 = _interopRequireDefault(_loggingDefaultOptions);\n\t\n\tvar _loggingLevels = __webpack_require__(5);\n\t\n\tvar _loggingLevels2 = _interopRequireDefault(_loggingLevels);\n\t\n\tvar _loggingMethods = __webpack_require__(6);\n\t\n\tvar _loggingMethods2 = _interopRequireDefault(_loggingMethods);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.LOGGING_DEFAULT_OPTIONS = _loggingDefaultOptions2.default;\n\texports.LOGGING_LEVELS = _loggingLevels2.default;\n\texports.LOGGING_METHODS = _loggingMethods2.default;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _constants = __webpack_require__(1);\n\t\n\t// I prefer default export rather than named export\n\texports.default = {\n\t  isConsoleDefined: isConsoleDefined,\n\t  isLogLevelValid: isLogLevelValid,\n\t  isNoneLogLevel: isNoneLogLevel,\n\t  isLoggingAllowed: isLoggingAllowed,\n\t  getDateTime: getDateTime\n\t};\n\t\n\t////////////////////////\n\t\n\t/**\n\t * Check if console is available or not\n\t * @returns {Boolean} Returns true or false\n\t */\n\t\n\tfunction isConsoleDefined() {\n\t\n\t  // No need of ===, typeof returns a string\n\t  return typeof console != 'undefined';\n\t}\n\t\n\t/**\n\t * Check if current log level is valid, less than max\n\t * and more than min log level\n\t * @param  {Number}  logLevel: Current log level eg. 1, 2, 3, 4\n\t * @returns {Boolean} Returns true or false\n\t */\n\tfunction isLogLevelValid(logLevel) {\n\t  return !!(logLevel && logLevel >= _constants.LOGGING_LEVELS.range.min && logLevel <= _constants.LOGGING_LEVELS.range.max);\n\t}\n\t\n\t/**\n\t * Check if current log level is none thus logging is disabled\n\t * @param  {Number}  logLevel: Current log level eg. 1, 2, 3, 4\n\t * @returns {Boolean} Returns true or false\n\t */\n\tfunction isNoneLogLevel(logLevel) {\n\t  return logLevel === _constants.LOGGING_LEVELS.types.none;\n\t}\n\t\n\t/**\n\t * Check if level of passed log method is more than (or equal to) the\n\t * current log level, thus allowing logging accordingly\n\t * @param  {Number}  logLevel: Current log level eg. 1, 2, 3, 4\n\t * @param  {String}  loggingType    : logging method eg. log, info, error, warn\n\t * @returns {Boolean} Returns true or false\n\t */\n\tfunction isLoggingAllowed(logLevel, loggingType) {\n\t  return _constants.LOGGING_LEVELS.types[loggingType] >= logLevel;\n\t}\n\t\n\t/**\n\t * Get current date and time\n\t * @returns {String} Returns date and time in string format\n\t */\n\tfunction getDateTime() {\n\t  var d = new Date();\n\t  var date = d.toDateString();\n\t\n\t  var customTimeFormat = d.toTimeString().match(/^([0-9]{2}:[0-9]{2}:[0-9]{2})/);\n\t\n\t  var time = customTimeFormat && customTimeFormat.length ? customTimeFormat[0] : '';\n\t\n\t  // NOTE: hey..!! see, 3 is not a magic number, if you think it is, then\n\t  // it's just milliseconds in 3 digits (000-999)\n\t  var appendMilliseconds = ('00' + d.getMilliseconds()).slice(-3);\n\t\n\t  return date + ' ' + time + '.' + appendMilliseconds;\n\t}\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.singleton = exports.logging = exports.common = undefined;\n\t\n\tvar _common = __webpack_require__(2);\n\t\n\tvar _common2 = _interopRequireDefault(_common);\n\t\n\tvar _logging = __webpack_require__(10);\n\t\n\tvar _logging2 = _interopRequireDefault(_logging);\n\t\n\tvar _singleton = __webpack_require__(11);\n\t\n\tvar _singleton2 = _interopRequireDefault(_singleton);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\texports.common = _common2.default;\n\texports.logging = _logging2.default;\n\texports.singleton = _singleton2.default;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.default = Object.freeze({\n\t  showDateTime: false,\n\t  prefix: ''\n\t});\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\texports.__esModule = true;\n\texports.default = Object.freeze({\n\t  get types() {\n\t    return {\n\t      log: 1,\n\t      trace: 2,\n\t      debug: 3,\n\t      info: 4,\n\t      warn: 5,\n\t      error: 6,\n\t      none: 7\n\t    };\n\t  },\n\t  get range() {\n\t    return {\n\t      min: this.types.log,\n\t      max: this.types.none\n\t    };\n\t  }\n\t});\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.default = ['log', 'trace', 'debug', 'info', 'warn', 'error'];\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _Clogy = __webpack_require__(8);\n\t\n\tvar _Clogy2 = _interopRequireDefault(_Clogy);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar clogy = new _Clogy2.default();\n\t\n\texports.default = clogy;\n\t\n\t// Because of Babel@6\n\t// Can use plugin: https://www.npmjs.com/package/babel-plugin-add-module-exports\n\t// Used this soln. instead:\n\t// http://stackoverflow.com/questions/34736771/webpack-umd-library-return-object-default/34778391#34778391\n\t//\n\t// This is intended behaviour from babel@ to babel@6 to support ES6 import export module system\n\t//\n\t// $FlowFixMe: suppressing this error until babel changes this style\n\t\n\tmodule.exports = clogy;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _utilities = __webpack_require__(3);\n\t\n\tvar _Logger2 = __webpack_require__(9);\n\t\n\tvar _Logger3 = _interopRequireDefault(_Logger2);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Clogy = function (_Logger) {\n\t  _inherits(Clogy, _Logger);\n\t\n\t  function Clogy() {\n\t    _classCallCheck(this, Clogy);\n\t\n\t    return _possibleConstructorReturn(this, _Logger.apply(this, arguments));\n\t  }\n\t\n\t  /**\n\t   * If you are using another JavaScript library that uses the clogy variable,\n\t   * you can run into conflicts with this library. In order to avoid these\n\t   * conflicts, you need to put clogy in no-conflict mode immediately after it\n\t   * is loaded onto the page and before you attempt to use clogy in your page.\n\t   * It works similar to jQuery's no-conflict mode\n\t   * @returns {clogy} Returns current instance i.e. clogy\n\t   */\n\t  Clogy.prototype.noConflict = function noConflict() {\n\t\n\t    // No need of ===, typeof returns a string\n\t    if (typeof window != 'undefined' && window.clogy) {\n\t\n\t      // it will be deleted because clogy is not a variable, but\n\t      // a property of the global object i.e. window;\n\t      // check yourself ('clogy' in window) -> false after deletion\n\t      delete window.clogy;\n\t    }\n\t\n\t    return this;\n\t  };\n\t\n\t  /**\n\t   * Used to extend logging functionality. Can be used for:\n\t   * 1. Adding a prefix\n\t   * 2. Submitting logs to server\n\t   * 3. Logging to a file\n\t   * 4. Showing toast messages\n\t   * @param  {Function} decoFunc: A decorator callback for extending logging\n\t   *                               functionality\n\t   * @returns {void | undefined} Returns nothing\n\t   */\n\t\n\t\n\t  Clogy.prototype.decorator = function decorator(decoFunc) {\n\t\n\t    // No need of ===, typeof returns a string\n\t    if (typeof decoFunc != 'function') {\n\t      throw new TypeError('Decorator should be a function');\n\t    }\n\t\n\t    decoFunc(_utilities.singleton.getInstance(this));\n\t  };\n\t\n\t  return Clogy;\n\t}(_Logger3.default);\n\t\n\t// JS hoisting will not work with Classes\n\t\n\t\n\texports.default = Clogy;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _constants = __webpack_require__(1);\n\t\n\tvar _utilities = __webpack_require__(3);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Logger = function () {\n\t  /***********************************/\n\t\n\t  /**** Flow's annotation syntax ****/\n\t  function Logger() {\n\t    _classCallCheck(this, Logger);\n\t\n\t    // See it's better to keep these two in state rather than creating a\n\t    // local variable for them. This way we can keep OOP style along with\n\t    // functional style programming\n\t\n\t    // Avoiding Object reshaping\n\t    this._options = {\n\t      showDateTime: null,\n\t      prefix: null\n\t    };\n\t\n\t    this._level = null;\n\t\n\t    this._setDefaults();\n\t  }\n\t\n\t  /**\n\t   * Setting default options like prefix, showDateTime, log level\n\t   * @returns {void | undefined} Returns nothing\n\t   */\n\t\n\t\n\t  Logger.prototype._setDefaults = function _setDefaults() {\n\t\n\t    // Set default options\n\t    this.setOptions(_constants.LOGGING_DEFAULT_OPTIONS);\n\t\n\t    // Set default log level\n\t    this.setLevel(this.LEVELS.info); // No need to use LOGGING_LEVELS.types.info again here\n\t  };\n\t\n\t  /**\n\t   * Used for returning config options\n\t   * @returns {ClogyOptionsType | null} Returns config options\n\t   */\n\t\n\t\n\t  Logger.prototype.getOptions = function getOptions() {\n\t    return this._options;\n\t  };\n\t\n\t  /**\n\t   * Used for setting options (showDateTime and prefix)\n\t   * @param  {ClogyOptionsType} options: Console options like showDateTime, prefix\n\t   * @returns {void | undefined} Returns nothing\n\t   */\n\t\n\t\n\t  Logger.prototype.setOptions = function setOptions(options) {\n\t    this._options = _extends({}, this.getOptions(), options);\n\t  };\n\t\n\t  /**\n\t   * Used for returning current log level; Default is info\n\t   * @returns {Number | null} Returns current log level\n\t   */\n\t\n\t\n\t  Logger.prototype.getLevel = function getLevel() {\n\t    return this._level;\n\t  };\n\t\n\t  /**\n\t   * Used for setting current log level\n\t   * @param  {number | string} level: log level (number or string)\n\t   * @returns {void | undefined} Returns nothing\n\t   * @example:\n\t   * clogy.setLevel(1); // log; number type argument\n\t   * clogy.setLevel(clogy.LEVELS.log); // log; enum type argument\n\t   * clogy.setLevel('log'); // log; string type argument\n\t   */\n\t\n\t\n\t  Logger.prototype.setLevel = function setLevel(level) {\n\t\n\t    // No need to check if log level is less or more than min and max or invalid\n\t    // Will be handled when logging\n\t    this._level = typeof level == 'string' ? // No need of ===, typeof returns a string\n\t    this.LEVELS[level.toLowerCase()] : level;\n\t  };\n\t\n\t  /**\n\t   * I know this should be static, but I am exposing instance instead of class\n\t   * If LEVELS are static, may be we can do clogy.__proto__.constructor.LEVELS\n\t   * or Object.getPrototypeOf(clogy).constructor.LEVELS, but that's not a good\n\t   * way to access static property\n\t   *\n\t   * Different log levels (along with values); use them to set current log level\n\t   *  1. 'log': 1\n\t   *  2. 'trace': 2\n\t   *  3. 'debug': 3\n\t   *  4. 'info': 4\n\t   *  5. 'warn': 5\n\t   *  6. 'error': 6\n\t   *  7. 'none': 7 (if current level is none, it won't log anything)\n\t   *\n\t   * If current log level is 'info', then all the levels below 'info' are valid\n\t   * and rest are invalid. It means ' clogy.info()', 'clogy.warn()' and\n\t   * 'clogy.error()' will work but 'clogy.log()', 'clogy.trace()' and\n\t   * 'clogy.debug()' won't\n\t   * @returns {LevelsType} Returns all log levels\n\t   */\n\t\n\t\n\t  /**\n\t   * Get stringifed allowed loggers (Order goes from top to bottom). Use utf-8 encoding for showing tick and cross marks, if not visible.\n\t   * @returns {String} Returns stringifed allowed loggers\n\t   * @example:\n\t   * clogy.stringifyAllowedLoggers(); // When current log level is info\n\t   * =>  1: log ✖\n\t   *     2: trace ✖\n\t   *     3: debug ✖\n\t   *     4: info ✔\n\t   *     5: warn ✔\n\t   *     6: error ✔\n\t   */\n\t  Logger.prototype.stringifyAllowedLoggers = function stringifyAllowedLoggers() {\n\t    var _this = this;\n\t\n\t    var tickMark = '\\u2714';\n\t    var crossMark = '\\u2716';\n\t\n\t    return _constants.LOGGING_METHODS.map(function (loggingType, index) {\n\t      return index + 1 + ': ' + loggingType + ' ' + (_utilities.common.isLoggingAllowed(_this.getLevel(), loggingType) ? tickMark : crossMark);\n\t    }).join('\\n');\n\t  };\n\t\n\t  /**\n\t   * Enable all levels; equivalent to 'clogy.setLevel(clogy.LEVELS.log)''\n\t   * @returns {void | undefined} Returns nothing\n\t   */\n\t\n\t\n\t  Logger.prototype.enableAllLevels = function enableAllLevels() {\n\t    this.setLevel(this.LEVELS.log);\n\t  };\n\t\n\t  /**\n\t   * Disable all levels; equivalent to 'clogy.setLevel(clogy.LEVELS.none)''\n\t   * @returns {void | undefined} Returns nothing\n\t   */\n\t\n\t\n\t  Logger.prototype.disableAllLevels = function disableAllLevels() {\n\t    this.setLevel(this.LEVELS.none);\n\t  };\n\t\n\t  _createClass(Logger, [{\n\t    key: 'LEVELS',\n\t    get: function get() {\n\t      return _constants.LOGGING_LEVELS.types;\n\t    }\n\t  }]);\n\t\n\t  return Logger;\n\t}();\n\t\n\t////////////////////////\n\t\n\t// Cached prototype once\n\t\n\t\n\tvar loggerPrototype = Logger.prototype;\n\t\n\t/**\n\t * Array.ForEach is slower than for() in for each for Arrays in JavaScript;\n\t * but negligible performance hit here (small loop).\n\t * We are also maintaining functional style programming here\n\t *\n\t * Logging methods such as log, info, error, warn etc. Used\n\t * for logging to console\n\t * @returns {void | undefined} Returns nothing\n\t */\n\t_constants.LOGGING_METHODS.forEach(function (method) {\n\t\n\t  // Not using arrow functions because 'this' will be undefined\n\t  // (Arrow functions capture the this value of the enclosing context)\n\t  loggerPrototype[method] = function () {\n\t    var logToConsoleParams = {\n\t      currentLogLevel: this.getLevel(),\n\t      loggingType: method,\n\t      options: this.getOptions()\n\t    };\n\t\n\t    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n\t      args[_key] = arguments[_key];\n\t    }\n\t\n\t    _utilities.logging.logToConsole(logToConsoleParams, args);\n\t  };\n\t});\n\t\n\t////////////////////////\n\t\n\t// JS hoisting will not work with Classes\n\texports.default = Logger;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\tvar _constants = __webpack_require__(1);\n\t\n\tvar _common = __webpack_require__(2);\n\t\n\tvar _common2 = _interopRequireDefault(_common);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar DEFAULT_LOGGING_TYPE = 'log';\n\t\n\t// I prefer default export rather than named export\n\texports.default = {\n\t  logToConsole: logToConsole\n\t};\n\t\n\t////////////////////////\n\t\n\t/**\n\t * Get console options and push them into an array (for logging)\n\t * @param  {ClogyOptionsType} options: Console options like showDateTime, prefix\n\t * @returns {any[]} Returns an array of console options\n\t */\n\t\n\tfunction getConsoleOptions(options) {\n\t  var consoleOptions = [];\n\t\n\t  if (options.showDateTime) {\n\t\n\t    // Better readability than consoleOptions[consoleOptions.length] = value\n\t    consoleOptions.push(_common2.default.getDateTime() + ': ');\n\t  }\n\t\n\t  if (options.prefix) {\n\t    consoleOptions.push(options.prefix);\n\t  }\n\t\n\t  return consoleOptions;\n\t}\n\t\n\t/**\n\t * Used for logging to console\n\t * @param  {String} loggingType: logging method eg. log, info, error, warn\n\t * @param  {any}    args       : any value\n\t * @returns {void | undefined} Returns nothing\n\t */\n\tfunction justLogItDude(loggingType, args) {\n\t  var consoleLoggingType = console[loggingType] || console[DEFAULT_LOGGING_TYPE];\n\t\n\t  // I know this should be returned earlier but there is\n\t  // negligible performance hit.\n\t  // May be I can move this to a function which can return me\n\t  // consoleLoggingType or false (maintain S of SOLID),\n\t  // but I prefer this to be here\n\t  if (!consoleLoggingType) {\n\t    return;\n\t  }\n\t\n\t  // The console object is not part of any standard and is an extension to the\n\t  // Document Object Model. Like other DOM objects, it is considered a host\n\t  // object and is not required to inherit from Object, nor its methods from\n\t  // Function, like native ECMAScript functions and objects do. This is the\n\t  // reason apply and call are undefined on those methods. In IE9, most DOM\n\t  // objects were improved to inherit from native ECMAScript types. As the\n\t  // developer tools are considered an extension to IE\n\t  // (albeit, a built-in extension), they clearly didn't receive the same\n\t  // improvements as the rest of the DOM.\n\t  // For what it's worth, you can still use some Function.prototype methods\n\t  // on console methods with a little bind() magic\n\t  Function.prototype.bind.call(consoleLoggingType, console).apply(console, args);\n\t}\n\t\n\t/**\n\t * Used for logging to console\n\t * Functional style programming; No mutating params, no state known beforehand\n\t * @param  {\n\t              currentLogLevel: number,\n\t              loggingType: string,\n\t              options: ClogyOptionsType\n\t           }        params: Object containing current log level ,\n\t *                          log methods, default options like prefix\n\t * @param  {any}    args  : any value\n\t * @returns {void | undefined} Returns nothing\n\t */\n\tfunction logToConsole() {\n\t  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t      currentLogLevel = _ref.currentLogLevel,\n\t      loggingType = _ref.loggingType,\n\t      _ref$options = _ref.options,\n\t      options = _ref$options === undefined ? _constants.LOGGING_DEFAULT_OPTIONS : _ref$options;\n\t\n\t  var args = arguments[1];\n\t\n\t  if (!_common2.default.isConsoleDefined()) {\n\t    return;\n\t  }\n\t\n\t  if (!_common2.default.isLogLevelValid(currentLogLevel)) {\n\t    throw new RangeError('Invalid LogLevel set, Please set a valid LogLevel');\n\t  }\n\t\n\t  if (_common2.default.isNoneLogLevel(currentLogLevel) || !_common2.default.isLoggingAllowed(currentLogLevel, loggingType)) {\n\t    return;\n\t  }\n\t\n\t  // Open array's arguments (array spread operator)\n\t  justLogItDude(loggingType, [].concat(getConsoleOptions(options), args));\n\t}\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\t\n\t\n\tvar instance = void 0;\n\t\n\t// I prefer default export rather than named export\n\t\n\t\n\texports.default = {\n\t  getInstance: getInstance\n\t};\n\t\n\t////////////////////////\n\t\n\t/**\n\t * Creates new instance from Clogy's parent i.e. Logger (a copy of parent)\n\t * @param  {ClogyType} originalInstance: clogy's instance\n\t * @returns {ClogyType} Returns a copy of parent\n\t */\n\t\n\tfunction createInstance(originalInstance) {\n\t  // Cached lookup once\n\t  var proto = Object.getPrototypeOf;\n\t\n\t  return proto(proto(originalInstance));\n\t}\n\t\n\t/**\n\t * Get cached instance\n\t * @param  {ClogyType} originalInstance: clogy's instance\n\t * @returns {ClogyType} Returns a copy of parent (cached)\n\t */\n\tfunction getInstance(originalInstance) {\n\t  // No need to go deep into prototype chain again\n\t  if (!instance) {\n\t    instance = createInstance(originalInstance);\n\t  }\n\t\n\t  return instance;\n\t}\n\n/***/ }\n/******/ ])\n});\n;\n\n\n// WEBPACK FOOTER //\n// clogy.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap d706405c85f0694eef41","/* @flow */\n\nimport LOGGING_DEFAULT_OPTIONS from './loggingDefaultOptions';\nimport LOGGING_LEVELS from './loggingLevels';\nimport LOGGING_METHODS from './loggingMethods';\n\nexport {\n  LOGGING_DEFAULT_OPTIONS,\n  LOGGING_LEVELS,\n  LOGGING_METHODS\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/constants/index.js","/* @flow */\n\nimport { LOGGING_LEVELS } from '../constants';\n\n// I prefer default export rather than named export\nexport default {\n  isConsoleDefined,\n  isLogLevelValid,\n  isNoneLogLevel,\n  isLoggingAllowed,\n  getDateTime\n};\n\n////////////////////////\n\n/**\n * Check if console is available or not\n * @returns {Boolean} Returns true or false\n */\nfunction isConsoleDefined(): boolean {\n\n  // No need of ===, typeof returns a string\n  return typeof(console) != 'undefined';\n}\n\n/**\n * Check if current log level is valid, less than max\n * and more than min log level\n * @param  {Number}  logLevel: Current log level eg. 1, 2, 3, 4\n * @returns {Boolean} Returns true or false\n */\nfunction isLogLevelValid(logLevel: number): boolean {\n  return !!(\n    logLevel &&\n    logLevel >= LOGGING_LEVELS.range.min &&\n    logLevel <= LOGGING_LEVELS.range.max\n  );\n}\n\n/**\n * Check if current log level is none thus logging is disabled\n * @param  {Number}  logLevel: Current log level eg. 1, 2, 3, 4\n * @returns {Boolean} Returns true or false\n */\nfunction isNoneLogLevel(logLevel: number): boolean {\n  return logLevel === LOGGING_LEVELS.types.none;\n}\n\n/**\n * Check if level of passed log method is more than (or equal to) the\n * current log level, thus allowing logging accordingly\n * @param  {Number}  logLevel: Current log level eg. 1, 2, 3, 4\n * @param  {String}  loggingType    : logging method eg. log, info, error, warn\n * @returns {Boolean} Returns true or false\n */\nfunction isLoggingAllowed(\n  logLevel: ? number,\n  loggingType: string\n): boolean {\n  return (\n    LOGGING_LEVELS.types[loggingType] >= logLevel\n  );\n}\n\n/**\n * Get current date and time\n * @returns {String} Returns date and time in string format\n */\nfunction getDateTime(): string {\n  const d: Date = new Date();\n  const date: string = d.toDateString();\n\n  const customTimeFormat: ? string[] = d.toTimeString().match(/^([0-9]{2}:[0-9]{2}:[0-9]{2})/);\n\n  const time: string = (customTimeFormat && customTimeFormat.length) ? customTimeFormat[0] : '';\n\n  // NOTE: hey..!! see, 3 is not a magic number, if you think it is, then\n  // it's just milliseconds in 3 digits (000-999)\n  const appendMilliseconds: string = `00${d.getMilliseconds()}`.slice(-3);\n\n  return `${date} ${time}.${appendMilliseconds}`;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utilities/common.js","/* @flow */\n\nimport common from './common';\nimport logging from './logging';\nimport singleton from './singleton';\n\nexport {\n  common,\n  logging,\n  singleton\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utilities/index.js","/* @flow */\n\nexport default Object.freeze({\n  showDateTime: false,\n  prefix: ''\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/constants/loggingDefaultOptions.js","/* @flow */\n\nexport default Object.freeze({\n  get types() {\n    return {\n      log: 1,\n      trace: 2,\n      debug: 3,\n      info: 4,\n      warn: 5,\n      error: 6,\n      none: 7\n    };\n  },\n  get range() {\n    return {\n      min: this.types.log,\n      max: this.types.none\n    };\n  }\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/constants/loggingLevels.js","/* @flow */\n\nexport default ['log', 'trace', 'debug', 'info', 'warn', 'error'];\n\n\n\n// WEBPACK FOOTER //\n// ./src/constants/loggingMethods.js","/* @flow */\n\nimport Clogy from './main/Clogy';\n\nimport type { ClogyType } from './globalFlowTypes';\n\nconst clogy: ClogyType = new Clogy();\n\nexport default clogy;\n\n// Because of Babel@6\n// Can use plugin: https://www.npmjs.com/package/babel-plugin-add-module-exports\n// Used this soln. instead:\n// http://stackoverflow.com/questions/34736771/webpack-umd-library-return-object-default/34778391#34778391\n//\n// This is intended behaviour from babel@ to babel@6 to support ES6 import export module system\n//\n// $FlowFixMe: suppressing this error until babel changes this style\nmodule.exports = clogy;\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","/* @flow */\n\nimport { singleton } from '../utilities';\nimport Logger from './Logger';\n\nclass Clogy extends Logger {\n\n  /**\n   * If you are using another JavaScript library that uses the clogy variable,\n   * you can run into conflicts with this library. In order to avoid these\n   * conflicts, you need to put clogy in no-conflict mode immediately after it\n   * is loaded onto the page and before you attempt to use clogy in your page.\n   * It works similar to jQuery's no-conflict mode\n   * @returns {clogy} Returns current instance i.e. clogy\n   */\n  noConflict(): this {\n\n    // No need of ===, typeof returns a string\n    if (typeof(window) != 'undefined' && window.clogy) {\n\n      // it will be deleted because clogy is not a variable, but\n      // a property of the global object i.e. window;\n      // check yourself ('clogy' in window) -> false after deletion\n      delete window.clogy;\n    }\n\n    return this;\n  }\n\n  /**\n   * Used to extend logging functionality. Can be used for:\n   * 1. Adding a prefix\n   * 2. Submitting logs to server\n   * 3. Logging to a file\n   * 4. Showing toast messages\n   * @param  {Function} decoFunc: A decorator callback for extending logging\n   *                               functionality\n   * @returns {void | undefined} Returns nothing\n   */\n  decorator(decoFunc: () => void): void {\n\n    // No need of ===, typeof returns a string\n    if (typeof(decoFunc) != 'function') {\n      throw new TypeError('Decorator should be a function');\n    }\n\n    decoFunc(singleton.getInstance(this));\n  }\n}\n\n// JS hoisting will not work with Classes\nexport default Clogy;\n\n\n\n// WEBPACK FOOTER //\n// ./src/main/Clogy.js","/* @flow */\n\nimport {\n  LOGGING_DEFAULT_OPTIONS,\n  LOGGING_LEVELS,\n  LOGGING_METHODS\n} from '../constants';\nimport { common, logging } from '../utilities';\n\nimport type { LevelsType, ClogyOptionsType } from '../globalFlowTypes';\n\nclass Logger {\n\n  /**** Flow's annotation syntax ****/\n  _options: ClogyOptionsType;\n\n  _level: ? number;\n  /***********************************/\n\n  constructor() {\n\n    // See it's better to keep these two in state rather than creating a\n    // local variable for them. This way we can keep OOP style along with\n    // functional style programming\n\n    // Avoiding Object reshaping\n    this._options = {\n      showDateTime: null,\n      prefix: null\n    };\n\n    this._level = null;\n\n    this._setDefaults();\n  }\n\n  /**\n   * Setting default options like prefix, showDateTime, log level\n   * @returns {void | undefined} Returns nothing\n   */\n  _setDefaults(): void {\n\n    // Set default options\n    this.setOptions(LOGGING_DEFAULT_OPTIONS);\n\n    // Set default log level\n    this.setLevel(this.LEVELS.info); // No need to use LOGGING_LEVELS.types.info again here\n  }\n\n  /**\n   * Used for returning config options\n   * @returns {ClogyOptionsType | null} Returns config options\n   */\n  getOptions(): ClogyOptionsType {\n    return this._options;\n  }\n\n  /**\n   * Used for setting options (showDateTime and prefix)\n   * @param  {ClogyOptionsType} options: Console options like showDateTime, prefix\n   * @returns {void | undefined} Returns nothing\n   */\n  setOptions(options: ClogyOptionsType) {\n    this._options = {\n      ...this.getOptions(),\n      ...options\n    };\n  }\n\n  /**\n   * Used for returning current log level; Default is info\n   * @returns {Number | null} Returns current log level\n   */\n  getLevel(): ? number {\n    return this._level;\n  }\n\n  /**\n   * Used for setting current log level\n   * @param  {number | string} level: log level (number or string)\n   * @returns {void | undefined} Returns nothing\n   * @example:\n   * clogy.setLevel(1); // log; number type argument\n   * clogy.setLevel(clogy.LEVELS.log); // log; enum type argument\n   * clogy.setLevel('log'); // log; string type argument\n   */\n  setLevel(level: number | string): void {\n\n    // No need to check if log level is less or more than min and max or invalid\n    // Will be handled when logging\n    this._level = (typeof(level) == 'string') ? // No need of ===, typeof returns a string\n      this.LEVELS[level.toLowerCase()] :\n      level;\n  }\n\n  /**\n   * I know this should be static, but I am exposing instance instead of class\n   * If LEVELS are static, may be we can do clogy.__proto__.constructor.LEVELS\n   * or Object.getPrototypeOf(clogy).constructor.LEVELS, but that's not a good\n   * way to access static property\n   *\n   * Different log levels (along with values); use them to set current log level\n   *  1. 'log': 1\n   *  2. 'trace': 2\n   *  3. 'debug': 3\n   *  4. 'info': 4\n   *  5. 'warn': 5\n   *  6. 'error': 6\n   *  7. 'none': 7 (if current level is none, it won't log anything)\n   *\n   * If current log level is 'info', then all the levels below 'info' are valid\n   * and rest are invalid. It means ' clogy.info()', 'clogy.warn()' and\n   * 'clogy.error()' will work but 'clogy.log()', 'clogy.trace()' and\n   * 'clogy.debug()' won't\n   * @returns {LevelsType} Returns all log levels\n   */\n  get LEVELS(): LevelsType {\n    return LOGGING_LEVELS.types;\n  }\n\n  /**\n   * Get stringifed allowed loggers (Order goes from top to bottom). Use utf-8 encoding for showing tick and cross marks, if not visible.\n   * @returns {String} Returns stringifed allowed loggers\n   * @example:\n   * clogy.stringifyAllowedLoggers(); // When current log level is info\n   * =>  1: log ✖\n   *     2: trace ✖\n   *     3: debug ✖\n   *     4: info ✔\n   *     5: warn ✔\n   *     6: error ✔\n   */\n  stringifyAllowedLoggers(): string {\n    const tickMark: string = '\\u2714';\n    const crossMark: string = '\\u2716';\n\n    return LOGGING_METHODS.map((loggingType: string, index: number) =>\n      `${(index + 1)}: ${loggingType} ${common.isLoggingAllowed(this.getLevel(), loggingType) ? tickMark: crossMark}`\n    ).join('\\n');\n  }\n\n  /**\n   * Enable all levels; equivalent to 'clogy.setLevel(clogy.LEVELS.log)''\n   * @returns {void | undefined} Returns nothing\n   */\n  enableAllLevels(): void {\n    this.setLevel(this.LEVELS.log);\n  }\n\n  /**\n   * Disable all levels; equivalent to 'clogy.setLevel(clogy.LEVELS.none)''\n   * @returns {void | undefined} Returns nothing\n   */\n  disableAllLevels(): void {\n    this.setLevel(this.LEVELS.none);\n  }\n}\n\n////////////////////////\n\n// Cached prototype once\nconst loggerPrototype: Object = Logger.prototype;\n\n/**\n * Array.ForEach is slower than for() in for each for Arrays in JavaScript;\n * but negligible performance hit here (small loop).\n * We are also maintaining functional style programming here\n *\n * Logging methods such as log, info, error, warn etc. Used\n * for logging to console\n * @returns {void | undefined} Returns nothing\n */\nLOGGING_METHODS.forEach((method: string) => {\n\n  // Not using arrow functions because 'this' will be undefined\n  // (Arrow functions capture the this value of the enclosing context)\n  loggerPrototype[method] = function(...args: any[]) {\n    const logToConsoleParams: {\n      currentLogLevel: number,\n      loggingType: string,\n      options: ClogyOptionsType\n    } = {\n      currentLogLevel: this.getLevel(),\n      loggingType: method,\n      options: this.getOptions()\n    };\n\n    logging.logToConsole(logToConsoleParams, args);\n  };\n});\n\n////////////////////////\n\n// JS hoisting will not work with Classes\nexport default Logger;\n\n\n\n// WEBPACK FOOTER //\n// ./src/main/Logger.js","/* @flow */\n\nimport {\n  LOGGING_DEFAULT_OPTIONS\n} from '../constants';\nimport common from './common';\n\nimport type { ClogyOptionsType } from '../globalFlowTypes';\n\nconst DEFAULT_LOGGING_TYPE: string = 'log';\n\n// I prefer default export rather than named export\nexport default {\n  logToConsole\n};\n\n////////////////////////\n\n/**\n * Get console options and push them into an array (for logging)\n * @param  {ClogyOptionsType} options: Console options like showDateTime, prefix\n * @returns {any[]} Returns an array of console options\n */\nfunction getConsoleOptions(options: ClogyOptionsType): any[] {\n  const consoleOptions: any[] = [];\n\n  if (options.showDateTime) {\n\n    // Better readability than consoleOptions[consoleOptions.length] = value\n    consoleOptions.push(`${common.getDateTime()}: `);\n  }\n\n  if (options.prefix) {\n    consoleOptions.push(options.prefix);\n  }\n\n  return consoleOptions;\n}\n\n/**\n * Used for logging to console\n * @param  {String} loggingType: logging method eg. log, info, error, warn\n * @param  {any}    args       : any value\n * @returns {void | undefined} Returns nothing\n */\nfunction justLogItDude(loggingType: string, args: any[]): void {\n  const consoleLoggingType: () => void = console[loggingType] || console[DEFAULT_LOGGING_TYPE];\n\n  // I know this should be returned earlier but there is\n  // negligible performance hit.\n  // May be I can move this to a function which can return me\n  // consoleLoggingType or false (maintain S of SOLID),\n  // but I prefer this to be here\n  if (!consoleLoggingType) {\n    return;\n  }\n\n  // The console object is not part of any standard and is an extension to the\n  // Document Object Model. Like other DOM objects, it is considered a host\n  // object and is not required to inherit from Object, nor its methods from\n  // Function, like native ECMAScript functions and objects do. This is the\n  // reason apply and call are undefined on those methods. In IE9, most DOM\n  // objects were improved to inherit from native ECMAScript types. As the\n  // developer tools are considered an extension to IE\n  // (albeit, a built-in extension), they clearly didn't receive the same\n  // improvements as the rest of the DOM.\n  // For what it's worth, you can still use some Function.prototype methods\n  // on console methods with a little bind() magic\n  Function.prototype.bind.call(consoleLoggingType, console).apply(console, args);\n}\n\n/**\n * Used for logging to console\n * Functional style programming; No mutating params, no state known beforehand\n * @param  {\n              currentLogLevel: number,\n              loggingType: string,\n              options: ClogyOptionsType\n           }        params: Object containing current log level ,\n *                          log methods, default options like prefix\n * @param  {any}    args  : any value\n * @returns {void | undefined} Returns nothing\n */\nfunction logToConsole({\n    currentLogLevel,\n    loggingType,\n    options = LOGGING_DEFAULT_OPTIONS // Avoiding crash, if someone set options to null or undefined\n  }: {\n    currentLogLevel: number,\n    loggingType: string,\n    options: ClogyOptionsType\n  } = {},\n  args: any[]\n): void {\n  if (!common.isConsoleDefined()) {\n    return;\n  }\n\n  if (!common.isLogLevelValid(currentLogLevel)) {\n    throw new RangeError('Invalid LogLevel set, Please set a valid LogLevel');\n  }\n\n  if (\n    common.isNoneLogLevel(currentLogLevel) ||\n    !common.isLoggingAllowed(currentLogLevel, loggingType)\n  ) {\n    return;\n  }\n\n  // Open array's arguments (array spread operator)\n  justLogItDude(loggingType, [...getConsoleOptions(options), ...args]);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utilities/logging.js","/* @flow */\n\nimport type { ClogyType } from '../globalFlowTypes';\n\nlet instance: ClogyType;\n\n// I prefer default export rather than named export\nexport default {\n  getInstance\n};\n\n////////////////////////\n\n/**\n * Creates new instance from Clogy's parent i.e. Logger (a copy of parent)\n * @param  {ClogyType} originalInstance: clogy's instance\n * @returns {ClogyType} Returns a copy of parent\n */\nfunction createInstance(originalInstance: ClogyType): Object {\n  // Cached lookup once\n  const proto = Object.getPrototypeOf;\n\n  return proto(proto(originalInstance));\n}\n\n/**\n * Get cached instance\n * @param  {ClogyType} originalInstance: clogy's instance\n * @returns {ClogyType} Returns a copy of parent (cached)\n */\nfunction getInstance(originalInstance: ClogyType): Object {\n  // No need to go deep into prototype chain again\n  if (!instance) {\n    instance = createInstance(originalInstance);\n  }\n\n  return instance;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/utilities/singleton.js"],"sourceRoot":""}